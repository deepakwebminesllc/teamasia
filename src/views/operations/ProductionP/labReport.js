import React ,{useState,useEffect} from 'react';
import {
  Form,
  FormGroup,
  Row,
  Col,
  Input,
  Button,
  Table,
  FormText

} from 'reactstrap';

import PropTypes from 'prop-types';
import { useLocation, useNavigate } from 'react-router-dom';
import ComponentCard5 from '../../../components/ComponentCard5';
import 'react-table-v6/react-table.css';

const JumbotronComponent = ({data2}) => {
  const [errorMessageFromApi, setErrorMessageFromApi] = useState([]);
  const [errors,setErrors] = useState({});
  const [labResData,setLabResData] = useState([]);
  const navigate = useNavigate();
  const location = useLocation();
  const {product} = location.state;
  const [formDatas, setFormDataS] = useState({
    items1:[],
    SignatureL:''
  });


console.log('product in Lab report',product);

  const addItem1 = () => {
    const newItems = formDatas.items1.slice();
    console.log("data",newItems);
    newItems.push({ 
      id:'x',
      production_plan_id:product.id,
      line_id: product.line_id,
      order_id:product.order_id,
      product_id:product.product_id,
      lab_test_id: "x",
      lab_test_direction_id:'x',
      dataX:[],
      method_name:"",
      unit: "",
      temperature: "",
      minimum_expectation: "",
      result: "",
      notes: "",
      signature: "",
      })
    setFormDataS(prevState => ({
      ...prevState,
      items1: newItems
    }));
  };

  const handleDeleteClick = async (itemId) => {
    try {
      // Call your API endpoint to delete the item
      const token = localStorage.getItem('userToken');
      const response = await fetch(`https://factory.teamasia.in/api/public/labreports/${itemId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
  
      // Check if the request was successful
      if (!response.ok) {
        throw new Error(`Error: ${response.statusText}`);
      }
      console.log('Item deleted successfully');
    } catch (error) {
      //only checks for error that are generated by fetch function , and cors 
      console.error('Failed to delete the item', error);
    }
  };

  const removeItem1 = index => {
    const newItems = formDatas.items1.slice();
    if(newItems[index].id !== 'x'){
      handleDeleteClick(newItems[index].id);
    }
    newItems.splice(index, 1);
    setFormDataS(prevState => ({
      ...prevState,
      items1: newItems
    }));
  };

  const handleInputChange1 = (index, e) => {
    const { name, value } = e.target;
    const newItems = formDatas.items1.slice();
  
    if (name === 'SignatureL') {
      // Update every field of signature in formDatas.items1
      const updatedItems = newItems.map(item => ({
        ...item,
        signature: value
      }));
      setFormDataS(prevState => ({
        ...prevState,
        items1: updatedItems,
        SignatureL:value
      }));
    } else {

      if(name === 'lab_test_id'){
        if(value === 'x'){
          newItems[index].method_name = '';
          newItems[index].lab_test_direction_id = 'x';
          setFormDataS(prevState => ({
            ...prevState,
            items1: newItems,
            dataX:[]
          }));
        }
        else{
          const element = labResData.find((lab)=> lab.id ===  value);
          console.log('element',element,value,labResData);
          newItems[index].method_name = element.method_name;
          newItems[index].lab_test_direction_id = 'x';
          if(element.labtestdirections !== 0){
            const resultX = element.labtestdirections.slice();
            resultX.push({id:'x',name:'Choose'});
            newItems[index].dataX = resultX;
          }else{
            newItems[index].dataX = [];
          }
          setFormDataS(prevState => ({
            ...prevState,
            items1: newItems,
          }));
        }
      }
      // Update the specific field at the given index
      newItems[index][name] = value;
      setFormDataS(prevState => ({
        ...prevState,
        items1: newItems
      }));
    }
  };


  
  const closer =()=>{
    setErrorMessageFromApi([]);
  }

  async function apiCall() {
    try {
        const filtered = formDatas.items1.filter((item)=>item.id !== 'x');

        if(filtered.length !== 0){
          console.log('country_id',formDatas,filtered);
            const token = localStorage.getItem('userToken');
            const response = await fetch(`https://factory.teamasia.in/api/public/labreports/1`, {
                method: "PUT",
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json',
                },
              
                body: JSON.stringify(filtered),
            });
            const data = await response.json();
            console.log("dataapi",data,response.status);
            if (response.status === 200) {
              navigate(-1);
            } else {
              console.error("Authentication failed:", Object.values(data.messages.errors));
              if (data.error) {
                setErrorMessageFromApi(Object.values(data.messages.errors));
              }
            } 
        }
         
        return null;
    } catch (error) {
      setErrorMessageFromApi(["Network error"]);
        return null;
    }
}
  async function apiCall1() {
    try {
      const filtered = formDatas.items1.filter((item)=>item.id === 'x');

      if(filtered.length !== 0){
        console.log('country_id',formDatas);
          const token = localStorage.getItem('userToken');
          const response = await fetch(`https://factory.teamasia.in/api/public/labreports`, {
              method: "POST",
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
              },
            
              body: JSON.stringify(filtered),
          });
          const data = await response.json();
          console.log("dataapi",data,response.status);
          if (response.status === 201) {
            navigate(-1);
          } else {
            console.error("Authentication failed:", Object.values(data.messages.errors));
            if (data.error) {
              setErrorMessageFromApi(Object.values(data.messages.errors));
            }
          } 
      }
       
      return null;
  } catch (error) {
    setErrorMessageFromApi(["Network error"]);
      return null;
  }
}

const validateForm=()=>{
  let formIsValid =true;
  const errors1 ={};

  if(formDatas.SignatureL === ''){
    formIsValid = false;
// eslint-disable-next-line dot-notation
   errors1["SignatureL"] ="Required"
 }
    formDatas.items1.forEach((element) => {
    console.log('element',element);
    if(element.lab_test_id=== 'x'){
             formIsValid = false;
      // eslint-disable-next-line dot-notation
            errors1["lab_test_id"] ="Required"
          }
          if(element.unit === ''){
             formIsValid = false;
      // eslint-disable-next-line dot-notation
            errors1["unit"] ="Required"
          }
          if(element.lab_test_direction_id	=== 'x'){
             formIsValid = false;
      // eslint-disable-next-line dot-notation
            errors1["lab_test_direction_id"] ="Required"
          }
          if(element.temperature === ''){
             formIsValid = false;
      // eslint-disable-next-line dot-notation
            errors1["temperature"] ="Required"
          }
          if(element.minimum_expectation === ''){
             formIsValid = false;
      // eslint-disable-next-line dot-notation
            errors1["minimum_expectation"] ="Required"
          }
          if(element.result === ''){
             formIsValid = false;
      // eslint-disable-next-line dot-notation
            errors1["result"] ="Required"
          }
          if(element.notes === ''){
             formIsValid = false;
      // eslint-disable-next-line dot-notation
            errors1["notes"] ="Required"
          }
      });

  setErrors(errors1);
  return formIsValid;
  }
  
  const handleSubmit = async (event) => {
    event.preventDefault();
    if(validateForm()) {
      console.log('Form is valid, proceed with API call');
      apiCall();
      apiCall1();
    } else {
      console.log('Form is invalid, do not submit');
    }
};



  console.log('modal',data2);


  useEffect(() => {
    
    // Fetch the data from the API
    const fetchData = async (resultXY) => {
      const token = localStorage.getItem('userToken');
      console.log('token',token);
      const response = await fetch(`https://factory.teamasia.in/api/public/labreports/?production_plan_id= ${product.id} & line_id=${product.line_id}`, {
        method: 'GET', 
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      // console.log('result',response);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      if(result && result.labreports.length !== 0){

        console.log('result labreports',result,result.labreports);

        const newItems = [];
        let el = {};

        const LabReportFromGet = result.labreports.map((lab,index)=>{
          el = resultXY.find((labs)=> labs.id ===  lab.lab_test_id);

          console.log('element',el,el.labtestdirections);
          newItems.push({ 
            id:'x',
            production_plan_id:'',
            line_id: '',
            order_id:'',
            product_id:'',
            lab_test_id: "x",
            lab_test_direction_id:'x',
            dataX:[],
            method_name:"",
            unit: "",
            temperature: "",
            minimum_expectation: "",
            result: "",
            notes: "",
            signature: "",
            })
          newItems[index].id = lab.id;
          newItems[index].production_plan_id = lab.production_plan_id;
          newItems[index].line_id = lab.line_id;
          newItems[index].order_id = lab.order_id;
          newItems[index].product_id = lab.product_id;

          newItems[index].lab_test_id = el.id;
          newItems[index].method_name = el.method_name;
          newItems[index].lab_test_direction_id = lab.lab_test_direction_id;
          newItems[index].unit = lab.unit;
          newItems[index].temperature = lab.temperature;
          newItems[index].minimum_expectation = lab.minimum_expectation;
          newItems[index].result = lab.result;
          newItems[index].notes = lab.notes;
          newItems[index].signature = lab.signature;

          const resultX = el.labtestdirections.slice();
          resultX.push({id:'x',name:'Choose'});
          newItems[index].dataX = resultX;
          
          return newItems;
        }
        )
        // newItems[index].lab_test_direction_id = 'x';
     console.log('LabReportFromGet',LabReportFromGet[0]);
     

        setFormDataS(prevState => ({
          ...prevState,
          items1: LabReportFromGet[0],
          SignatureL:result.labreports[0].signature
        }));
      }
      
    };
    const fetchlabResorceData = async () => {
      const token = localStorage.getItem('userToken');
      console.log('token',token);
      const response = await fetch(`https://factory.teamasia.in/api/public/labtests/?is_trashed=0`, {
        method: 'GET', 
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('result',response);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      const resultX = result.labtests.slice();
      resultX.push({id:'x',name:'Choose'});
      setLabResData(resultX);
      fetchData(resultX);
      console.log('result.labtests',result.labtests);
    };
    fetchlabResorceData();
    
  }, []);

  
  return (         
    <>
     <ComponentCard5 >
            
                 <Form onSubmit={handleSubmit}>
                   <Row>
                      <Row>
                      <Col md="8">{errorMessageFromApi.length !== 0 && (
                      <div style={{ background:'#ff9c7a',color: 'black', marginBottom: '10px', padding:"5px 10px"}}>
                        <div style={{display:'flex',justifyContent:'space-between'}}>
                          Following errors were found:
                          <span onClick={closer} style={{cursor:'pointer'}}>X</span>
                        </div>
                        <ul>
                        {errorMessageFromApi.map((item)=>
                        <li>
                            {item}
                        </li>
                        )}
                        </ul>
                      </div>
                    )}
                    </Col>
                        <Col md="12">
                          <FormGroup>
                            <Table className="qa-packaging-roll-modal-items-padding">
                              <thead>
                                <tr>
                                <th><div>Test Name	</div></th>
                                <th><div>Test Method	</div></th>
                                <th><div>Direction	</div></th>
                                <th><div>Unit	</div></th>
                                <th><div> Temperature</div></th>
                                <th><div>Minimum Expectation</div></th>
                                <th><div>Result	</div></th>
                                <th><div>Notes</div></th>
                                <th><Button type="button" className='btn-success' onClick={addItem1}>+</Button></th>
                                </tr>
                              </thead>
                              <tbody>
                                {formDatas.items1.map((item, index) => (
                                    <tr key={item}>
                                        <td>
                                        <Input type="select" 
                                              name="lab_test_id" 
                                              id="name"
                                              value={item.lab_test_id}
                                              onChange={e => handleInputChange1(index, e)} 
                                              className={item.lab_test_id === 'x' && errors.lab_test_id ? "is-invalid":""}
                                              >
                                              {labResData.map((quality)=>{
                                                  return <option key={quality.id} value={quality.id}>{quality.name}</option>
                                                })}
                                            </Input>
                                                { item.lab_test_id === 'x' && errors.lab_test_id &&  <FormText className="text-danger">Required</FormText>}
                                        </td>
                                        <td>
                                          <Input name="method_name"
                                                value={item.method_name} 
                                                type="text" 
                                                onChange={e => handleInputChange1(index, e)}
                                                disabled="true"
                                                className={item.method_name === '' && errors.method_name ? "is-invalid":""}
                                                />
                                                  {item.method_name === '' && errors.method_name &&  <FormText className="text-danger">Required</FormText>}
                                        </td>
                                        <td>
                                          <Input name="lab_test_direction_id"
                                                value={item.lab_test_direction_id} 
                                                type="select" 
                                                onChange={e => handleInputChange1(index, e)}  
                                                placeholder=""
                                                className={item.lab_test_direction_id === 'x' && errors.lab_test_direction_id ? "is-invalid":""}
                                                >
                                                {item.dataX.map((direction)=>{
                                                  return <option key={direction.id} value={direction.id}>{direction.name}</option>
                                                })}
                                              </Input>
                                                  {item.lab_test_direction_id === 'x' && errors.lab_test_direction_id &&  <FormText className="text-danger">Required</FormText>}
                                        </td>
                                        
                                        <td>
                                          <Input name="unit"
                                                value={item.unit} 
                                                type="text" 
                                                onChange={e => handleInputChange1(index, e)}  
                                                placeholder=""
                                                className={item.unit === '' && errors.unit ? "is-invalid":""}
                                                />
                                                  {item.unit === '' && errors.unit &&  <FormText className="text-danger">Required</FormText>}
                                        </td>
                                        <td>
                                          <Input name="temperature"
                                                value={item.temperature} 
                                                type="text" 
                                                onChange={e => handleInputChange1(index, e)}  
                                                placeholder=""
                                                className={item.temperature === '' && errors.temperature ? "is-invalid":""}
                                                />
                                                  {item.temperature === '' && errors.temperature &&  <FormText className="text-danger">Required</FormText>}
                                                 
                                        </td>
                                        
                                        <td>
                                          <Input name="minimum_expectation"
                                                value={item.minimum_expectation} 
                                                type="text" 
                                                onChange={e => handleInputChange1(index, e)}  
                                                placeholder=""
                                                className={item.minimum_expectation === '' && errors.minimum_expectation ? "is-invalid":""}
                                                />
                                                  {item.minimum_expectation === '' && errors.minimum_expectation &&  <FormText className="text-danger">Required</FormText>}
                                                 
                                        </td>
                                        <td>
                                          <Input name="result"
                                                value={item.result} 
                                                type="text" 
                                                onChange={e => handleInputChange1(index, e)}  
                                                placeholder=""
                                                className={item.result === '' && errors.result ? "is-invalid":""}
                                                />
                                                  {item.result === '' && errors.result &&  <FormText className="text-danger">Required</FormText>}
                                                 
                                        </td>
                                        
                                        <td>
                                          <Input name="notes"
                                                value={item.notes} 
                                                type="text" 
                                                onChange={e => handleInputChange1(index, e)}  
                                                placeholder=""
                                                className={item.notes === '' && errors.notes ? "is-invalid":""}
                                                />
                                                  {item.notes === '' && errors.notes &&  <FormText className="text-danger">Required</FormText>}
                                                 
                                        </td>
                                       
                                        <td><button type="button"  style={{ backgroundColor:"red",marginTop:"5px"}} onClick={() => removeItem1(index)} >X</button></td>
                                    </tr>
                                ))}
                              </tbody>
                            </Table>
                          </FormGroup>
                        </Col>
                      </Row>
                      <Col md="4">
                          <Input name="SignatureL"
                                value={formDatas.SignatureL} 
                                type="text" 
                                onChange={e => handleInputChange1(0,e)}  
                                placeholder=""
                                className={formDatas.SignatureL === '' && errors.SignatureL ? "is-invalid":""}
                                />
                                  {formDatas.SignatureL === '' && errors.SignatureL &&  <FormText className="text-danger">Required</FormText>}
                      </Col>
                      <Col md="10">
                        <FormGroup>
                          <Button type="submit" className="btn my-btn-color" style={{marginTop:"28px"}}>
                              Save
                          </Button>
                          <Button className='my-btn-color-red' style={{marginTop:"28px"}} onClick={()=>navigate(-1)}>
                              cancel
                          </Button>
                        </FormGroup>
                      </Col>
                   </Row>
                 </Form>
             
          </ComponentCard5>
    </>
  );
};

export default JumbotronComponent;
JumbotronComponent.propTypes = {
  data2: PropTypes.array.isRequired,
};
import React,{useState,useEffect}  from 'react';
import {
  Button,
  Row,
  Table,
  Col,
} from 'reactstrap';
import { useLocation, useNavigate } from 'react-router-dom';
import Barcode from 'react-barcode';
import ComponentCard1 from '../../../components/ComponentCard1';
import ComponentCard4 from '../../../components/ComponentCard4';
import 'react-table-v6/react-table.css';
// import Barcode from "../../../assets/images/bg/barcode.png"

const JumbotronComponent = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [data, setData] = useState([]);
  const [data7, setData7] = useState([]);
  const [data8, setData8] = useState([]);
  const [data9, setData9] = useState([]);

  const product = location.state.item;

  const {backSideProduct} = location.state;


  const printing  = (productprints)=>{
    console.log('productprints',productprints);
    
   const printArray =  productprints.map((item)=> {
      let str = ''
      const design = data7.find((d)=> d.id === item.design_id);
      const shade = data8.find((s)=> s.id === item.shade_id);
      
      console.log('design,shade',design,shade)
      if(design){
        str += `${design.code}/${design.code}/`
      }
      if(shade){
        str += shade.name
      }
      return str
    }  
)

    return printArray.length > 0? printArray:[];
  }

  const gradeName  = (gradeId)=>{

    console.log('productprints',gradeId);

      const grade = data9.find((d)=> d.id === gradeId);
      
      console.log('grade',grade)
   
      return grade?.name

}


  console.log('product in view',product);

  const handleEditAdd = () => {
    navigate('/order/factory-surplus/edit',{state:{product, backSideProduct}});
  };

  const handleSmallRollCreate = () => {
    navigate('/order/factory-surplus/small-roll-create',{state:{item:product}});
  };

  const handleSmallRollEdit = (rollItem) => {
    navigate('/order/factory-surplus/small-roll-edit', {state: rollItem});
  };

  const handleDeleteClick = async (itemId) => {
    try {
      // Call your API endpoint to delete the item
      const token = localStorage.getItem('userToken');
      const response = await fetch(`https://factory.teamasia.in/api/public/smallrolls/${itemId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
  
      // Check if the request was successful
      if (!response.ok) {
        throw new Error(`Error: ${response.statusText}`);
      }
  
      // Filter out the deleted item from your data state
      const updatedData = data.filter((item) => item.id !== itemId);
      setData(updatedData);
  
      console.log('Item deleted successfully');
    } catch (error) {
      //only checks for error that are generated by fetch function , and cors 
      console.error('Failed to delete the item', error);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem('userToken');
      // console.log('token',token);
      const response = await fetch(`https://factory.teamasia.in/api/public/smallrolls/?product_id=${product.id}`, {
        method: 'GET', 
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      // console.log('result',response);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      console.log("responsejson1",result.smallrolls);
      setData(result.smallrolls); 
    };

    const fetchData7 = async () => {
      const token = localStorage.getItem('userToken');
      // console.log('token',token);
      const response = await fetch('https://factory.teamasia.in/api/public/designs', {
        method: 'GET', 
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      // console.log('result',response);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      const resultX = result.designs.slice();
      // resultX.push({id:'x',design_id:'x',code:'Choose'});
      setData7(resultX);
    };

    const fetchData8 = async () => {
      const token = localStorage.getItem('userToken');
      // console.log('token',token);
      const response = await fetch('https://factory.teamasia.in/api/public/shades', {
        method: 'GET', 
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      // console.log('result',response);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      const resultX = result.shades.slice();
      // resultX.push({id:'x',shade_id:'x',name:'Choose'});
      setData8(resultX);
    };
    const fetchData9 = async () => {
      const token = localStorage.getItem('userToken');
      // console.log('token',token);
      const response = await fetch('https://factory.teamasia.in/api/public/grades', {
        method: 'GET', 
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      // console.log('result',response);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      const resultX = result.grades.slice();
      resultX.push({ id: 'x', name: 'Choose' });
      setData9(resultX);
    };

    fetchData9();
    fetchData8();
    fetchData7();
    fetchData();
  },[]);

  return (
    <>
      <ComponentCard1 title="">
         <Row>
                <Col md="12">
                  <Button className='my-btn-color' style={{ marginBottom: '1rem',marginRight:'10px' }} onClick={() => handleEditAdd()}>
                    Edit Product
                  </Button>
                </Col>
                
              </Row>
           
             
           

            <ComponentCard4>
             {/* repeat start */}
              <div className='table-margin'>
               <Table className='table-margin-zero order-table-button' size="sm">
              
                  <Row  style={{background:'#e3e3e3',padding:'2px'}}>
                    <Col md="6">
                      <div style={{margin:'0px 0px'}}>
                        <div className='fix-wid-1'><i className="bi-menu-button-wide-fill my-eye-color" style={{fontSize:'20px',marginRight:'1px'}}/><span style={{ fontWeight: '900' }}>Product {product.id}</span></div> 
                      </div>
                    </Col>
                    <Col md="6" style={{padding:'5px 0px 0px 0px'}}>
                      <button type='button' className="btn mybtncustomer my-btn-color-blue mr-3" style={{marginRight:'10px'}}> Remaining: API-MISSING meters</button>
                      <button type='button' className="btn mybtncustomer my-btn-color mr-3" style={{marginRight:'10px'}}> Total: {product.quantity} meters</button>
                      <button type='button' className="btn mybtncustomer my-btn-color-red mr-1" onClick={() => handleSmallRollCreate()}> Create Small Roll </button>
                    </Col>
                  </Row>
                  
                </Table>
                
                 <div>
                      <div key={product.id} className='table-margin'>
                       
                        <div>
                          <Table className='table-margin-zero ' responsive size="sm">
                            <thead>
                              <tr>
                                <th colSpan={20}>
                                  <p style={{ background: '#777', textAlign: 'center', color: 'white', marginBottom: '0px' }}> Front Side </p>
                                </th>
                              </tr>
                              <tr>
                                <th scope="col">Grain</th>
                                <th scope="col">Color</th>
                                <th scope="col">Quality</th>
                                <th scope="col">Thickness</th>
                                <th scope="col">Fabric</th>
                                <th scope="col">FabricColor</th>
                                <th scope="col">HSN</th>
                                <th scope="col">Price($)</th>
                                <th scope="col">Tax</th>
                                <th scope="col">Embossing</th>
                                <th scope="col">Printing</th>
                                <th scope="col">CIR.</th>
                                <th scope="col">AT</th>
                              </tr>
                            </thead>
                            <tbody>
                            <tr>
                              <td title={product.grain_name}>{product.grain_name}</td>
                              <td title={product.color_name}>{product.color_name}</td>
                              <td title={product.quality_name}>{product.quality_name}</td>
                              <td title={product.thickness}>{product.thickness}</td>
                              <td title={product.fabric_name}>{product.fabric_name}</td>
                              <td title={product.fabric_color_name}>{product.fabric_color_name}</td>
                              <td title={product.hsn_name}>{product.hsn_name}</td>
                              <td title={product.price}>{product.price}</td>
                              <td title={product.tax_rate}>{product.tax_rate}%</td>
                              <td title={product.emboss_name}>{product.emboss_name}</td>
                              <td>{printing(product.productprints).map(item=> <div>{item}</div>)}</td>
                              <td>N/A</td>
                              <td>N/A</td>
                            </tr>
                            </tbody>
                          </Table>
                          {backSideProduct && (
                            <Table className='table-margin-zero ' responsive size="sm">
                              <thead>
                                <tr>
                                  <th colSpan={20}>
                                    <p style={{ background: '#777', textAlign: 'center', color: 'white', marginBottom: '0px' }}> Back Side </p>
                                  </th>
                                </tr>
                                <tr>
                                  <th scope="col">Grain</th>
                                  <th scope="col">Color</th>
                                  <th scope="col">Quality</th>
                                  <th scope="col">Thickness</th>
                                  <th scope="col">Fabric</th>
                                  <th scope="col">FabricColor</th>
                                  <th scope="col">HSN</th>
                                  <th scope="col">Price($)</th>
                                  <th scope="col">Tax</th>
                                  <th scope="col">Embossing</th>
                                  <th scope="col">Printing</th>
                                  <th scope="col">CIR.</th>
                                  <th scope="col">AT</th>
                                </tr>
                              </thead>
                              <tbody>
                                <tr>
                                  <td title={backSideProduct.grain_name}>{backSideProduct.grain_name}</td>
                                  <td title={backSideProduct.color_name}>{backSideProduct.color_name}</td>
                                  <td title={backSideProduct.quality_name}>{backSideProduct.quality_name}</td>
                                  <td title={backSideProduct.thickness}>{backSideProduct.thickness}</td>
                                  <td title={backSideProduct.fabric_name}>{backSideProduct.fabric_name}</td>
                                  <td title={backSideProduct.fabric_color_name}>{backSideProduct.fabric_color_name}</td>
                                  <td title={backSideProduct.hsn_name}>{backSideProduct.hsn_name}</td>
                                  <td title={backSideProduct.price}>{backSideProduct.price}</td>
                                  <td title={backSideProduct.tax_rate}>{backSideProduct.tax_rate}%</td>
                                  <td title={backSideProduct.emboss_name}>{backSideProduct.emboss_name}</td>
                                  <td>{printing(backSideProduct.productprints).map(item=> <div>{item}</div>)}</td>
                                  <td>N/A</td>
                                  <td>N/A</td>
                                </tr>
                              </tbody>
                            </Table>
                          )}
                        </div>
                      </div>

                 </div>
               </div>
              {/* repeat end */}
             </ComponentCard4>
         
            {data?.length !== 0 ? <ComponentCard4 title="">  
                      <Table responsive size="sm">
                        <thead>
                          
                          <tr>
                            <th scope="col">S. No.</th>
                            <th scope="col">Quantity</th>
                            <th scope="col">Grade</th>
                            <th scope="col">Weight</th>
                            <th scope="col">BIN</th>
                            <th scope="col">GSM(g/m2)</th>
                            <th scope="col">Code</th>
                            <th scope="col">Action</th>
                            <th scope="col">Comment</th>
                          
                          </tr>
                        </thead>
                        <tbody>
                            {
                              data.map((roll,index)=>{
                            return (
                                      <tr key={roll.id}>
                                          <td>{index}</td>
                                          <td>{roll.quantity}</td>
                                          <td>{gradeName(roll.grade_id)}</td>
                                          <td>{roll.weight}</td>
                                          <td>{roll.bin}</td>
                                          <td>{((roll.weight * 1000) / (roll.quantity * roll.width)).toFixed(2)}</td>
                                          {/* <td><img src={Barcode} alt='barcode'/></td> */}
                                          <td><td><Barcode value={`SMALL${roll.id}`} height={20} /></td></td>
                                          <td>
                                            <td ><Button ><i className="bi bi-printer-fill my-pen-color" /></Button></td>
                                            <td ><Button ><i className="bi bi-pencil-fill my-eye-color" onClick={()=>handleSmallRollEdit(roll)} /></Button></td>
                                            <td ><Button ><i className="bi bi-trash-fill my-bell-color" onClick={() => handleDeleteClick(roll.id)}/></Button></td>
                                          </td>
                                          <td>{roll.comment}</td>
                                        </tr>
                                 )
                              })
                            }
                        </tbody>
                      </Table>
              </ComponentCard4>: ''}
              
           
        
      </ComponentCard1>
    </>
  );
};

export default JumbotronComponent;

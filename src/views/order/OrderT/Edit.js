import React,{useEffect,useState,useCallback} from 'react';
import AsyncSelect from 'react-select/async';
import debounce from 'lodash.debounce';

import {
  Card,
  CardBody,
  CardTitle,
  Row,
  Col,
  Form,
  FormGroup,
  Label,
  Input,
  FormText,
  Button,
} from 'reactstrap';
// import { useParams } from 'react-router-dom';
import { useLocation,useNavigate } from 'react-router-dom';

// import ComponentCard from '../../components/ComponentCard';


// Custom hook for fetching options
const useDebouncedFetchOptions = (endpoint) => {
  const fetchOptions = async (inputValue) => {
    const token = localStorage.getItem('userToken');
    const response = await fetch(`https://factory.teamasia.in/api/public/${endpoint}?search=${inputValue}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const result = await response.json();
    return result[endpoint].map(item => ({ value: item.id, label: item.name || item.code || item.company_name }));
  };

  const debouncedFetch = useCallback(debounce((inputValue, callback) => {
    fetchOptions(inputValue).then(callback).catch(error => {
      console.error(error);
      callback([]);
    });
  }, 300), [endpoint]);

  return debouncedFetch;
};

const Edit = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const {id,title,type,customer_id: customerId} = location.state
  
  const [ProductsAll, setAllProducts] = useState([]);
  const [ProductData, setProductData] = useState([]);

  console.log('local',location.state);


  const [formDatas, setFormDataS] = useState({
  title,
  type,
  customerId
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    console.log('hi')
    setFormDataS(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleSelectChange = (selectedOption, actionMeta) => {
    setFormDataS(prevState => ({
      ...prevState,
      [actionMeta.name]: selectedOption
    }));
  };

//  console.log("items",items);

const customerOptions = useDebouncedFetchOptions('customers');

  const addProductItem = () => {
     navigate('/order/order-templates/product-add',{state: {id}});
  };

  const editProductItem = (product) => {
    console.log('idxxxxx',id);
    const backSideProduct = ProductsAll.find((prod)=> prod.ref_product_id === product.id);

    console.log('backSideProduct',backSideProduct);
    
     navigate('/order/order-templates/product-edit',{state: {product, backSideProduct}});
  };

  const handleDeleteClick = async (itemId) => {
    try {
      // Call your API endpoint to delete the item
      const token = localStorage.getItem('userToken');
      const response = await fetch(`https://factory.teamasia.in/api/public/products/${itemId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
  
      // Check if the request was successful
      if (!response.ok) {
        throw new Error(`Error: ${response.statusText}`);
      }
  
      // Filter out the deleted item from your data state
      const updatedData = ProductData.filter((item) => item.id !== itemId);
       setProductData(updatedData);
  
      console.log('Item deleted successfully');
    } catch (error) {
      //only checks for error that are generated by fetch function , and cors 
      console.error('Failed to delete the item', error);
    }
  };

  // const handleTypeChange = (e) => {
  //   const { name, value } = e.target;
  //   // setSelectedType(e.target.value);
  //   setFormDataS(prevState => ({
  //     ...prevState,
  //     [name]: value
  //   }));
  //   // console.log('e',e.target.options[e.target.selectedIndex].text);
  //   console.log('e',e.target.value);
  // };

  async function apiCall() {
    try {
        const token = localStorage.getItem('userToken');
        const response = await fetch(`https://factory.teamasia.in/api/public/ordertemplates/${id}`, {
            method: "PUT",
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
           
            body: JSON.stringify({
              title: formDatas.title,
              type: formDatas.type,
              customer_id: formDatas.customerId.value,
              is_trashed: '0'
            }),
        });

        const dataZ = await response.json();
        console.log("dataapi",dataZ)
        if (response.ok) {


          navigate('/order/order-templates');
            
        } 
            // Handle any errors, such as showing an error message to the user
            console.error("Authentication failed:", dataZ.message);
            return null;
      
    } catch (error) {
        console.error("Network error:", error);
        return null;
    }
}

const handleSubmit = async (event) => {
  event.preventDefault();
  console.log('event',event);
  apiCall();
};


  useEffect(() => {

    const fetchData1 = async () => {
      const token = localStorage.getItem('userToken');
      // console.log('token',token);
      const response = await fetch(`https://factory.teamasia.in/api/public/customers/${customerId}`, {
        method: 'GET', 
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      // console.log('result',response);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      console.log("data1 customers",result);
      // const resultX = result.customers.slice();
      // const sever = result.find(item => item.id === formDatas.customerId);
      if(!result.id){
        setFormDataS(prevState => ({
          ...prevState,
           customerId:{value:'x',label:'choose'},
           billingAddressId:'x',
           deliveryAddressId:'x'
        }));
      }

      setFormDataS(prevState => ({
        ...prevState,
         customerId:{value: result.id,label:result.company_name}
      }));
    };

    const fetchProductData = async () => {
      const token = localStorage.getItem('userToken');
      console.log('token',token);
      const response = await fetch(`https://factory.teamasia.in/api/public/products/?template_id=${id}&is_trashed=0`, {
        method: 'GET', 
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      // console.log('result',response);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      console.log("response(products)",result);
      const resultFiltered = result.products.filter(product => product.ref_product_id === '0');
      setProductData(resultFiltered);
      setAllProducts(result.products);

};
    fetchData1();
    fetchProductData();
  },[]);
  return (
<div>
     
     <Row>
       <Col md="12">
         <Card>
           <CardTitle tag="h4" className="border-bottom bg-primary p-3 mb-0 text-white">
           </CardTitle>
           <CardBody className="bg-light">
             <CardTitle tag="h4" className="mb-0">
             </CardTitle>
           </CardBody>
           <CardBody>
             <Form onSubmit={handleSubmit}>

               <Row>
                 <Col md="8" className=''>
                   <FormGroup>
                     <Label>Template Title</Label>
                     <Input type="text" 
                     name="title" 
                     id="name"
                     placeholder="Enter name" 
                     value={formDatas.title}
                     onChange={handleChange} 
                      />
                     <FormText className="muted"></FormText>
                   </FormGroup>
                 </Col>

                 <Col md="8" className='mb-5'>
                     <FormGroup>
                        <Label>Choose Customer</Label>
                        <AsyncSelect
                          name="customerId"
                          onChange={handleSelectChange}
                          loadOptions={customerOptions}
                          value={formDatas.customerId}
                          isClearable
                          isSearchable
                        />
                      
                          <FormText className="text-danger"></FormText>     
                     </FormGroup>
                  </Col>

                  <Row>
                  <Col md="10">
                    <Label>Products</Label>
                  </Col>
                  <Col md="2">
                    <Button type="button" className='my-btn-color-red' onClick={addProductItem}>Add Product</Button>
                  </Col>
                  <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
                    <table className="table" >        
                      <thead >
                          <tr >
                            <th>Grain</th>
                            <th>Fabric</th>
                            <th>Quality</th>
                            <th>Color</th>
                            <th>Quantity</th>
                            <th>Actions</th>
                          </tr>
                        </thead>
                      <tbody>
                        {ProductData.map((product) => (
                          <tr key={product.id}>
                          <td>{product.grain_name}</td>
                          <td>{product.fabric_name}</td>
                          <td>{product.quality_name}</td>
                          <td>{product.color_name}</td>
                          <td>{product.quantity}</td>
                          <td>
                            {/* Action buttons or icons */}
                              <button type="button" className="btn mybtncustomer btn-secondary btn-sm mr-2" onClick={() => editProductItem(product)}><i className="bi bi-pencil-fill my-pen-color" /></button>
                              <button type="button" className="btn mybtncustomer btn-secondary btn-sm mr-2" onClick={() => handleDeleteClick(product.id)} ><i className="bi bi-trash-fill my-trash-color" /></button>
                          </td>
                        </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                  
                </Row>

                 <Col md="4">
                   <FormGroup>
                    <Button type="submit" className="btn my-btn-color" style={{marginTop:"28px"}}>
                        Submit
                    </Button>
                   </FormGroup>
                 </Col>
               </Row>
               
              
             </Form>
             
           </CardBody>
          
          
           
         </Card>
       </Col> 
     </Row>
     
   </div>
  );
};

export default Edit;
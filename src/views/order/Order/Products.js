import React,{ useState,useEffect} from 'react';
import {useNavigate } from 'react-router-dom';
import { Table ,
  Card,
  CardBody,
  CardTitle,
  Row,
  Col,
  Label,
  Button,} from 'reactstrap';
import PropTypes from 'prop-types';

const Products = (props) => {
  const navigate = useNavigate();
  const {orderID} = props;

  const [data, setData] = useState([]);
  const [ProductsAll, setAllProducts] = useState([]);

  console.log('in product',orderID);

  const addProductItem = () => {
     navigate('/order/orders/product-add',{state: {orderID}});
  };

  const editProductItem = (product) => {
    const backSideProduct = ProductsAll.find((prod)=> prod.ref_product_id === product.id);
    console.log('backSideProduct',backSideProduct);
     navigate('/order/orders/product-edit',{state: {product,backSideProduct}});
  };





  const handleDeleteClick = async (itemId) => {
    try {
      // Call your API endpoint to delete the item
      const token = localStorage.getItem('userToken');
      const response = await fetch(`https://factory.teamasia.in/api/public/products/${itemId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
  
      // Check if the request was successful
      if (!response.ok) {
        throw new Error(`Error: ${response.statusText}`);
      }
  
      // Filter out the deleted item from your data state
      const updatedData = data.filter((item) => item.id !== itemId);
      setData(updatedData);
  
      console.log('Item deleted successfully');
    } catch (error) {
      //only checks for error that are generated by fetch function , and cors 
      console.error('Failed to delete the item', error);
    }
  };

  useEffect(() => {
    
    // Fetch the data from the API
    const fetchData = async () => {
      const token = localStorage.getItem('userToken');
      // console.log('token',token);
      const response = await fetch(`https://factory.teamasia.in/api/public/products/?order_id=${orderID}`, {
        method: 'GET', 
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      // console.log('result',response);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      const resultFiltered = result.products.filter(product => product.ref_product_id === '0');
      console.log("responsejson in products",resultFiltered);
      setAllProducts(result.products);
      setData(resultFiltered);
    };
    fetchData();  
  },[]);

  return (
    <Card>
         <CardTitle tag="h4" className="mb-0 text-white">
           </CardTitle>
          
           <CardBody>
    <Row>
    <Col md="10">
      <Label>Products</Label>
    </Col>
    <Col md="2">
      <Button type="button" className='my-btn-color-red' onClick={addProductItem}>Add Product</Button>
    </Col>
    <Table size='sm' responsive className="order-page-table">
              <thead >
                    <tr >
                      <th>Grain</th>
                      <th>Quality</th>
                      <th>Color</th>
                      <th>Thickness</th>
                      <th>Fabric</th>
                      <th>Quantity</th>
                      <th>Delivery Date</th>
                      <th>Action</th>
                    </tr>
              </thead>

              <tbody>
                {data.map((product) => (
                  <tr key={product.id}>
                  <td title={product.grain_name}>{product.grain_name}</td>
                  <td title={product.quality_name}>{product.quality_name}</td>
                  <td title={product.color_name}>{product.color_name}</td>
                  <td title={product.thickness}>{product.thickness}</td>
                  <td title={product.fabric_name}>{product.fabric_name}</td>
                  <td title={product.quantity}>{product.quantity}</td>
                  <td>{product.delivery_date}</td>

            
                  <td>
                            {/* Action buttons or icons */}
                              <button type="button" className="btn btn-secondary btn-sm mr-2" onClick={() => editProductItem(product)} ><i className="bi bi-pencil-fill my-pen-color" /></button>
                              <button type="button" className="btn btn-secondary btn-sm mr-2" onClick={() => handleDeleteClick(product.id)} ><i className="bi bi-trash-fill my-trash-color" /></button>
                  </td>
                </tr>
                ))}
              </tbody>
            
              </Table>  
   </Row>
   </CardBody>
   </Card>
   
   
  );
};

export default Products;
Products.propTypes = {
  orderID: PropTypes.string.isRequired
};